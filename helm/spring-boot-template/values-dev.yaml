# Geliştirme ortamı için replica sayısı
replicaCount: 1  # Geliştirme ortamı için genellikle 1 replika yeterlidir.

image:
  # Geliştirme image'ınızın bulunduğu Docker repository
  repository: your-docker-repo/spring-boot-template-dev
  # Uygulamanızın sürüm numarası; geliştirme için "latest" veya belirli bir tag kullanılabilir.
  tag: "latest"
  # Image çekme politikası: IfNotPresent tercih edilebilir.
  pullPolicy: IfNotPresent

service:
  # Geliştirme ortamında genellikle ClusterIP kullanılır.
  type: ClusterIP
  # Servisin expose edileceği port.
  port: 8080

ingress:
  enabled: true
  # Ingress için kullanılacak sınıf, örneğin "nginx".
  className: "nginx"
  annotations:
    kubernetes.io/ingress.class: "nginx"
    # SSL yönlendirmesi, geliştirme ortamında genellikle false olur.
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
  hosts:
    - host: dev.example.com  # Geliştirme ortamına ait domain, DNS veya hosts dosyanızda tanımlı olmalı.
      paths:
        - path: /           # Trafiğin yönlendirileceği URL yolu.
          pathType: Prefix  # Belirtilen path ile başlayan tüm istekler yönlendirilir.

spring:
  profiles:
    active: dev  # Aktif Spring profili: dev
  datasource:
    # Geliştirme veritabanı bağlantı URL'si; localhost kullanarak yerel veritabanına bağlanabilirsiniz.
    url: jdbc:mysql://localhost:3306/employee_dev_db?allowPublicKeyRetrieval=true&useSSL=false&serverTimezone=UTC
    username: dev_employee_user  # Geliştirme için veritabanı kullanıcı adı
    password: dev_employee_pass  # Geliştirme için veritabanı şifresi

resources:
  limits:
    cpu: "100m"       # Örneğin: 100m CPU limiti
    memory: "128Mi"   # 128 MiB bellek limiti
  requests:
    cpu: "50m"        # Minimum 50m CPU isteği
    memory: "64Mi"    # Minimum 64 MiB bellek isteği
